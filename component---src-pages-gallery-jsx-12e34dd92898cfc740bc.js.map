{"version":3,"sources":["webpack:///../../src/TemplateTag/TemplateTag.js","webpack:///../../src/trimResultTransformer/trimResultTransformer.js","webpack:///../../src/stripIndentTransformer/stripIndentTransformer.js","webpack:///../../src/replaceResultTransformer/replaceResultTransformer.js","webpack:///../../src/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack:///../../src/inlineArrayTransformer/inlineArrayTransformer.js","webpack:///../../src/splitStringTransformer/splitStringTransformer.js","webpack:///../../src/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack:///../../src/stripIndent/stripIndent.js","webpack:///../../src/commaLists/commaLists.js","webpack:///../../src/commaListsAnd/commaListsAnd.js","webpack:///../../src/commaListsOr/commaListsOr.js","webpack:///../../src/html/html.js","webpack:///../../src/safeHtml/safeHtml.js","webpack:///../../src/oneLine/oneLine.js","webpack:///../../src/oneLineTrim/oneLineTrim.js","webpack:///../../src/oneLineCommaLists/oneLineCommaLists.js","webpack:///../../src/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack:///../../src/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack:///../../src/inlineLists/inlineLists.js","webpack:///../../src/oneLineInlineLists/oneLineInlineLists.js","webpack:///../../src/stripIndents/stripIndents.js","webpack:///./src/components/Thumbnail.jsx","webpack:///./src/pages/gallery.jsx","webpack:///../src/image-utils.ts","webpack:///../src/components/hooks.ts","webpack:///../src/components/layout-wrapper.tsx","webpack:///../src/components/picture.tsx","webpack:///../src/components/placeholder.tsx","webpack:///../src/components/main-image.tsx","webpack:///../src/components/gatsby-image.server.tsx","webpack:///../src/components/gatsby-image.browser.tsx","webpack:///../src/components/static-image.server.tsx","webpack:///../src/components/static-image.tsx","webpack:///./node_modules/camelcase/index.js"],"names":["TemplateTag","transformers","expressions","strings","Array","this","map","transformer","previousTag","template","substitutions","resultSoFar","remainingPart","substitution","transformSubstitution","concat","str","res","transform","endResult","side","onEndResult","type","match","indent","Math","min","el","regexp","RegExp","replaceWhat","replaceWith","onSubstitution","defaults","separator","conjunction","serial","opts","arrayLength","separatorIndex","splitBy","isValidValue","x","Number","inlineArrayTransformer","splitStringTransformer","replaceSubstitutionTransformer","replaceResultTransformer","stripIndentTransformer","Thumbnail","props","style","width","height","Gallery","data","Header","className","sx","display","gridGap","gridTemplateColumns","allFile","edges","img","key","node","id","image","childImageSharp","gatsbyImageData","imageCache","Set","hasNativeLazyLoadSupport","HTMLImageElement","prototype","gatsbyImageIsInstalled","GATSBY___IMAGE","storeImageloaded","cacheKey","add","hasImageLoaded","has","format","getMainProps","isLoading","isLoaded","images","loading","toggleLoaded","ref","current","document","documentElement","dataset","objectFit","objectPosition","window","objectFitPolyfill","import","left","position","top","transition","willChange","shouldLoad","opacity","onLoad","e","target","currentTarget","Image","src","currentSrc","decode","then","getPlaceholderProps","placeholder","layout","backgroundColor","wrapperStyle","bottom","right","result","output","Sizer","React","paddingTop","maxWidth","alt","role","LayoutWrapper","children","Fragment","srcSet","innerRef","decoding","undefined","Picture","forwardRef","fallback","sources","sizes","fallbackImage","length","media","propTypes","PropTypes","isRequired","displayName","Placeholder","propName","componentName","Error","MainImage","altValidator","string","object","GatsbyImageHydrator","_this2","root","createRef","hydrated","forceRender","NODE_ENV","lazyHydrator","unobserveRef","state","_lazyHydrate","hasSSRHtml","querySelector","Promise","resolve","lazyHydrate","JSON","stringify","_this3","toggleIsLoaded","setState","_setupIntersectionObserver","useCache","intersectionObserver","createIntersectionObserver","_this4","onStartLoad","wasCached","shouldComponentUpdate","nextProps","nextState","hasChanged","render","_this5","componentDidMount","ssrElement","i","complete","_this","addEventListener","removeEventListener","componentWillUnmount","Type","as","overflow","verticalAlign","wStyle","wClass","wrapperProps","sizer","dangerouslySetInnerHTML","__html","suppressHydrationWarning","Component","GatsbyImage","warn","propsKey","checkDimensionProps","number","validLayouts","StaticImage","GatsbyImageBrowser","r","imageData","__imageData","__error","console","camelCase","input","options","isArray","TypeError","Object","assign","pascalCase","trim","filter","join","toUpperCase","toLowerCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","default"],"mappings":"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","file":"component---src-pages-gallery-jsx-12e34dd92898cfc740bc.js","sourcesContent":["/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nexport default class TemplateTag {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  constructor(...transformers) {\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(transformer => {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n  tag = (strings, ...expressions) => {\n    if (typeof strings === 'function') {\n      // if the first argument passed is a function, assume it is a template tag and return\n      // an intermediary tag that processes the template using the aforementioned tag, passing the\n      // result to our tag\n      return this.interimTag.bind(this, strings);\n    }\n\n    if (typeof strings === 'string') {\n      // if the first argument passed is a string, just transform it\n      return this.transformEndResult(strings);\n    }\n\n    // else, return a transformed end result of processing the template with our tag\n    strings = strings.map(this.transformString.bind(this));\n    return this.transformEndResult(\n      strings.reduce(this.processSubstitutions.bind(this, expressions)),\n    );\n  };\n\n  /**\n   * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n   * template tag to our own template tag.\n   * @param  {Function}        nextTag          - the received template tag\n   * @param  {Array<String>}   template         - the template to process\n   * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n   * @return {*}                                - the final processed value\n   */\n  interimTag(previousTag, template, ...substitutions) {\n    return this.tag`${previousTag(template, ...substitutions)}`;\n  }\n\n  /**\n   * Performs bulk processing on the tagged template, transforming each substitution and then\n   * concatenating the resulting values into a string.\n   * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n   * @param  {String}   resultSoFar   - this iteration's result string so far\n   * @param  {String}   remainingPart - the template chunk after the current substitution\n   * @return {String}                 - the result of joining this iteration's processed substitution with the result\n   */\n  processSubstitutions(substitutions, resultSoFar, remainingPart) {\n    const substitution = this.transformSubstitution(\n      substitutions.shift(),\n      resultSoFar,\n    );\n    return ''.concat(resultSoFar, substitution, remainingPart);\n  }\n\n  /**\n   * Iterate through each transformer, applying the transformer's `onString` method to the template\n   * strings before all substitutions are processed.\n   * @param {String}  str - The input string\n   * @return {String}     - The final results of processing each transformer\n   */\n  transformString(str) {\n    const cb = (res, transform) =>\n      transform.onString ? transform.onString(res) : res;\n    return this.transformers.reduce(cb, str);\n  }\n\n  /**\n   * When a substitution is encountered, iterates through each transformer and applies the transformer's\n   * `onSubstitution` method to the substitution.\n   * @param  {*}      substitution - The current substitution\n   * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n   * @return {*}                   - The final result of applying all substitution transformations.\n   */\n  transformSubstitution(substitution, resultSoFar) {\n    const cb = (res, transform) =>\n      transform.onSubstitution\n        ? transform.onSubstitution(res, resultSoFar)\n        : res;\n    return this.transformers.reduce(cb, substitution);\n  }\n\n  /**\n   * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n   * template literal after all substitutions have finished processing.\n   * @param  {String} endResult - The processed template, just before it is returned from the tag\n   * @return {String}           - The final results of processing each transformer\n   */\n  transformEndResult(endResult) {\n    const cb = (res, transform) =>\n      transform.onEndResult ? transform.onEndResult(res) : res;\n    return this.transformers.reduce(cb, endResult);\n  }\n}\n","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nconst trimResultTransformer = (side = '') => ({\n  onEndResult(endResult) {\n    if (side === '') {\n      return endResult.trim();\n    }\n\n    side = side.toLowerCase();\n\n    if (side === 'start' || side === 'left') {\n      return endResult.replace(/^\\s*/, '');\n    }\n\n    if (side === 'end' || side === 'right') {\n      return endResult.replace(/\\s*$/, '');\n    }\n\n    throw new Error(`Side not supported: ${side}`);\n  },\n});\n\nexport default trimResultTransformer;\n","/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nconst stripIndentTransformer = (type = 'initial') => ({\n  onEndResult(endResult) {\n    if (type === 'initial') {\n      // remove the shortest leading indentation from each line\n      const match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n      const indent = match && Math.min(...match.map(el => el.length));\n      if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        return endResult.replace(regexp, '');\n      }\n      return endResult;\n    }\n    if (type === 'all') {\n      // remove all indentation from each line\n      return endResult.replace(/^[^\\S\\n]+/gm, '');\n    }\n    throw new Error(`Unknown type: ${type}`);\n  },\n});\n\nexport default stripIndentTransformer;\n","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nconst replaceResultTransformer = (replaceWhat, replaceWith) => ({\n  onEndResult(endResult) {\n    if (replaceWhat == null || replaceWith == null) {\n      throw new Error(\n        'replaceResultTransformer requires at least 2 arguments.',\n      );\n    }\n    return endResult.replace(replaceWhat, replaceWith);\n  },\n});\n\nexport default replaceResultTransformer;\n","const replaceSubstitutionTransformer = (replaceWhat, replaceWith) => ({\n  onSubstitution(substitution, resultSoFar) {\n    if (replaceWhat == null || replaceWith == null) {\n      throw new Error(\n        'replaceSubstitutionTransformer requires at least 2 arguments.',\n      );\n    }\n\n    // Do not touch if null or undefined\n    if (substitution == null) {\n      return substitution;\n    } else {\n      return substitution.toString().replace(replaceWhat, replaceWith);\n    }\n  },\n});\n\nexport default replaceSubstitutionTransformer;\n","const defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false,\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nconst inlineArrayTransformer = (opts = defaults) => ({\n  onSubstitution(substitution, resultSoFar) {\n    // only operate on arrays\n    if (Array.isArray(substitution)) {\n      const arrayLength = substitution.length;\n      const separator = opts.separator;\n      const conjunction = opts.conjunction;\n      const serial = opts.serial;\n      // join each item in the array into a string where each item is separated by separator\n      // be sure to maintain indentation\n      const indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n      if (indent) {\n        substitution = substitution.join(separator + indent[1]);\n      } else {\n        substitution = substitution.join(separator + ' ');\n      }\n      // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n      if (conjunction && arrayLength > 1) {\n        const separatorIndex = substitution.lastIndexOf(separator);\n        substitution =\n          substitution.slice(0, separatorIndex) +\n          (serial ? separator : '') +\n          ' ' +\n          conjunction +\n          substitution.slice(separatorIndex + 1);\n      }\n    }\n    return substitution;\n  },\n});\n\nexport default inlineArrayTransformer;\n","const splitStringTransformer = splitBy => ({\n  onSubstitution(substitution, resultSoFar) {\n    if (splitBy != null && typeof splitBy === 'string') {\n      if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n        substitution = substitution.split(splitBy);\n      }\n    } else {\n      throw new Error('You need to specify a string character to split by.');\n    }\n    return substitution;\n  },\n});\n\nexport default splitStringTransformer;\n","const isValidValue = x =>\n  x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n\nconst removeNonPrintingValuesTransformer = () => ({\n  onSubstitution(substitution) {\n    if (Array.isArray(substitution)) {\n      return substitution.filter(isValidValue);\n    }\n    if (isValidValue(substitution)) {\n      return substitution;\n    }\n    return '';\n  },\n});\n\nexport default removeNonPrintingValuesTransformer;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst stripIndent = new TemplateTag(\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default stripIndent;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst commaLists = new TemplateTag(\n  inlineArrayTransformer({ separator: ',' }),\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default commaLists;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst commaListsAnd = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'and' }),\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default commaListsAnd;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst commaListsOr = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'or' }),\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default commaListsOr;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nconst html = new TemplateTag(\n  splitStringTransformer('\\n'),\n  removeNonPrintingValuesTransformer,\n  inlineArrayTransformer,\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default html;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nconst safeHtml = new TemplateTag(\n  splitStringTransformer('\\n'),\n  inlineArrayTransformer,\n  stripIndentTransformer,\n  trimResultTransformer,\n  replaceSubstitutionTransformer(/&/g, '&amp;'),\n  replaceSubstitutionTransformer(/</g, '&lt;'),\n  replaceSubstitutionTransformer(/>/g, '&gt;'),\n  replaceSubstitutionTransformer(/\"/g, '&quot;'),\n  replaceSubstitutionTransformer(/'/g, '&#x27;'),\n  replaceSubstitutionTransformer(/`/g, '&#x60;'),\n);\n\nexport default safeHtml;\n","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLine = new TemplateTag(\n  replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLine;\n","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineTrim = new TemplateTag(\n  replaceResultTransformer(/(?:\\n\\s*)/g, ''),\n  trimResultTransformer,\n);\n\nexport default oneLineTrim;\n","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineCommaLists = new TemplateTag(\n  inlineArrayTransformer({ separator: ',' }),\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineCommaLists;\n","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineCommaListsOr = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'or' }),\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineCommaListsOr;\n","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineCommaListsAnd = new TemplateTag(\n  inlineArrayTransformer({ separator: ',', conjunction: 'and' }),\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineCommaListsAnd;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst inlineLists = new TemplateTag(\n  inlineArrayTransformer,\n  stripIndentTransformer,\n  trimResultTransformer,\n);\n\nexport default inlineLists;\n","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nconst oneLineInlineLists = new TemplateTag(\n  inlineArrayTransformer,\n  replaceResultTransformer(/(?:\\s+)/g, ' '),\n  trimResultTransformer,\n);\n\nexport default oneLineInlineLists;\n","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nconst stripIndents = new TemplateTag(\n  stripIndentTransformer('all'),\n  trimResultTransformer,\n);\n\nexport default stripIndents;\n","import React from 'react';\n// import { Box } from 'rebass';\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\n\nconst Thumbnail = ({ ...props }) => (\n  <GatsbyImage \n    style={{ width: '200px', height: '200px' }} \n    {...props} />\n);\n\nThumbnail.propTypes = {};\n\nexport default Thumbnail;\n","import React from 'react';\nimport { shape, any, arrayOf } from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { Box } from 'rebass';\nimport Header from '../components/Header';\nimport Thumbnail from '../components/Thumbnail';\n\nexport const thumbFluid = graphql`\n  fragment thumbFluid on File {\n    childImageSharp {\n      gatsbyImageData(layout: FULL_WIDTH)\n    }\n  }\n`;\n\nexport const query = graphql`\n  query {\n    allFile(\n      filter: { relativePath: { regex: \"/pics/.*jpg/\" } }\n      sort: { fields: name }\n    ) {\n      edges {\n        node {\n          id\n          name\n          ...thumbFluid\n        }\n      }\n    }\n  }\n`;\n\nconst Gallery = ({ data }) => {\n  return (\n    <div>\n      <Header />\n      <Box\n        className=\"imgs\"\n        sx={{\n          display: 'grid',\n          gridGap: 3, // theme.space[3]\n          gridTemplateColumns: 'repeat(auto-fit, minmax(128px, 1fr))',\n        }}\n      >\n        {data.allFile.edges.map((img) => (\n          <Thumbnail\n            key={img.node.id}\n            width={200}\n            image={img.childImageSharp.gatsbyImageData}\n          />\n        ))}\n      </Box>\n    </div>\n  );\n};\n\nGallery.propTypes = {\n  data: shape({\n    allFile: shape({\n      edges: arrayOf(any),\n    }),\n  }),\n};\n\nexport default Gallery;\n","/* eslint-disable no-unused-expressions */\nimport { stripIndent } from \"common-tags\"\nimport camelCase from \"camelcase\"\nimport { IGatsbyImageData } from \".\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.substr(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(stripIndent`\n    The requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* eslint-disable no-unused-expressions */\nimport {\n  useState,\n  CSSProperties,\n  useEffect,\n  HTMLAttributes,\n  ImgHTMLAttributes,\n  ReactEventHandler,\n  SetStateAction,\n  Dispatch,\n  RefObject,\n} from \"react\"\nimport { Node } from \"gatsby\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport {\n  IGatsbyImageHelperArgs,\n  generateImageData,\n  Layout,\n  EVERY_BREAKPOINT,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\nconst imageCache = new Set<string>()\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport function storeImageloaded(cacheKey?: string): void {\n  if (cacheKey) {\n    imageCache.add(cacheKey)\n  }\n}\n\nexport function hasImageLoaded(cacheKey: string): boolean {\n  return imageCache.has(cacheKey)\n}\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nexport type ImageDataLike = FileNode | IGatsbyImageDataParent | IGatsbyImageData\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport async function applyPolyfill(\n  ref: RefObject<HTMLImageElement>\n): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      // @ts-ignore typescript can't find the module for some reason ¯\\_(ツ)_/¯\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(ref.current)\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  toggleLoaded?: (loaded: boolean) => void,\n  cacheKey?: string,\n  ref?: RefObject<HTMLImageElement>,\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  const onLoad: ReactEventHandler<HTMLImageElement> = function (e) {\n    if (isLoaded) {\n      return\n    }\n\n    storeImageloaded(cacheKey)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .catch(() => {\n          // ignore error, we just go forward\n        })\n        .then(() => {\n          toggleLoaded(true)\n        })\n    } else {\n      toggleLoaded(true)\n    }\n  }\n\n  // Polyfill \"object-fit\" if unsupported (mostly IE)\n  if (ref?.current && !(`objectFit` in document.documentElement.style)) {\n    ref.current.dataset.objectFit = style.objectFit ?? `cover`\n    ref.current.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n    applyPolyfill(ref)\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n    onLoad,\n    ref,\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport function useImageLoaded(\n  cacheKey: string,\n  loading: \"lazy\" | \"eager\",\n  ref: any\n): {\n  isLoaded: boolean\n  isLoading: boolean\n  toggleLoaded: Dispatch<SetStateAction<boolean>>\n} {\n  const [isLoaded, toggleLoaded] = useState(false)\n  const [isLoading, toggleIsLoading] = useState(loading === `eager`)\n\n  const rAF =\n    typeof window !== `undefined` && `requestAnimationFrame` in window\n      ? requestAnimationFrame\n      : function (cb: TimerHandler): number {\n          return setTimeout(cb, 16)\n        }\n  const cRAF =\n    typeof window !== `undefined` && `cancelAnimationFrame` in window\n      ? cancelAnimationFrame\n      : clearTimeout\n\n  useEffect(() => {\n    let interval: number\n    // @see https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback/50019873#50019873\n    function toggleIfRefExists(): void {\n      if (ref.current) {\n        if (loading === `eager` && ref.current.complete) {\n          storeImageloaded(cacheKey)\n          toggleLoaded(true)\n        } else {\n          toggleIsLoading(true)\n        }\n      } else {\n        interval = rAF(toggleIfRefExists)\n      }\n    }\n    toggleIfRefExists()\n\n    return (): void => {\n      cRAF(interval)\n    }\n  }, [])\n\n  return {\n    isLoading,\n    isLoaded,\n    toggleLoaded,\n  }\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\n\nimport React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer: string | null = null\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {\n          // eslint-disable-next-line no-undef\n          SERVER && <NativeScriptLoading />\n        }\n      </Fragment>\n    )\n  }\n","/* eslint-disable filenames/match-regex */\nimport React, {\n  FunctionComponent,\n  ImgHTMLAttributes,\n  forwardRef,\n  LegacyRef,\n} from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n  innerRef: LegacyRef<HTMLImageElement>\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  innerRef,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n      ref={innerRef}\n    />\n  )\n}\n\nexport const Picture = forwardRef<HTMLImageElement, PictureProps>(\n  function Picture(\n    { fallback, sources = [], shouldLoad = true, ...props },\n    ref\n  ) {\n    const sizes = props.sizes || fallback?.sizes\n    const fallbackImage = (\n      <Image\n        {...props}\n        {...fallback}\n        sizes={sizes}\n        shouldLoad={shouldLoad}\n        innerRef={ref}\n      />\n    )\n\n    if (!sources.length) {\n      return fallbackImage\n    }\n\n    return (\n      <picture>\n        {sources.map(({ media, srcSet, type }) => (\n          <source\n            key={`${media}-${type}-${srcSet}`}\n            type={type}\n            media={media}\n            srcSet={shouldLoad ? srcSet : undefined}\n            data-srcset={!shouldLoad ? srcSet : undefined}\n            sizes={sizes}\n          />\n        ))}\n        {fallbackImage}\n      </picture>\n    )\n  }\n)\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { forwardRef } from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage = forwardRef<HTMLImageElement, MainImageProps>(\n  function MainImage(props, ref) {\n    return (\n      <>\n        <Picture ref={ref} {...props} />\n        <noscript>\n          <Picture {...props} shouldLoad={true} />\n        </noscript>\n      </>\n    )\n  }\n)\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, {\n  ElementType,\n  FunctionComponent,\n  CSSProperties,\n  WeakValidationMap,\n} from \"react\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImageHydrator: FunctionComponent<{\n  as?: ElementType\n  style?: CSSProperties\n  className?: string\n}> = function GatsbyImageHydrator({ as: Type = `div`, children, ...props }) {\n  return <Type {...props}>{children}</Type>\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n    if (preactClass) {\n      className = preactClass\n    }\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return (\n      <GatsbyImageHydrator\n        {...wrapperProps}\n        as={as}\n        style={{\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        }}\n        className={`${wClass}${className ? ` ${className}` : ``}`}\n      >\n        <LayoutWrapper layout={layout} width={width} height={height}>\n          <Placeholder\n            {...getPlaceholderProps(\n              placeholder,\n              false,\n              layout,\n              width,\n              height,\n              placeholderBackgroundColor,\n              objectFit,\n              objectPosition\n            )}\n          />\n\n          <MainImage\n            data-gatsby-image-ssr=\"\"\n            className={imgClassName}\n            {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n            // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n            {...getMainProps(\n              loading === `eager`,\n              false,\n              cleanedImages,\n              loading,\n              undefined,\n              undefined,\n              undefined,\n              imgStyle\n            )}\n          />\n        </LayoutWrapper>\n      </GatsbyImageHydrator>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","/* eslint-disable no-unused-expressions */\nimport React, {\n  Component,\n  ElementType,\n  createRef,\n  MutableRefObject,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  RefObject,\n  CSSProperties,\n} from \"react\"\nimport {\n  getWrapperProps,\n  hasNativeLazyLoadSupport,\n  storeImageloaded,\n  hasImageLoaded,\n  gatsbyImageIsInstalled,\n} from \"./hooks\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport { Layout } from \"../image-utils\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport { Unobserver } from \"./intersection-observer\"\nimport { render } from \"react-dom\"\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: () => void\n  onError?: () => void\n  onStartLoad?: (props: { wasCached?: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nclass GatsbyImageHydrator extends Component<\n  GatsbyImageProps,\n  { isLoading: boolean; isLoaded: boolean }\n> {\n  root: RefObject<HTMLImageElement | undefined> = createRef<\n    HTMLImageElement | undefined\n  >()\n  hydrated: MutableRefObject<boolean> = { current: false }\n  forceRender: MutableRefObject<boolean> = {\n    // In dev we use render not hydrate, to avoid hydration warnings\n    current: process.env.NODE_ENV === `development`,\n  }\n  lazyHydrator: () => void | null = null\n  ref = createRef<HTMLImageElement>()\n  unobserveRef: Unobserver\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoading: hasNativeLazyLoadSupport(),\n      isLoaded: false,\n    }\n  }\n\n  _lazyHydrate(props, state): Promise<void> {\n    const hasSSRHtml = this.root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    )\n    // On first server hydration do nothing\n    if (hasNativeLazyLoadSupport() && hasSSRHtml && !this.hydrated.current) {\n      this.hydrated.current = true\n      return Promise.resolve()\n    }\n\n    return import(`./lazy-hydrate`).then(({ lazyHydrate }) => {\n      const cacheKey = JSON.stringify(this.props.image.images)\n      this.lazyHydrator = lazyHydrate(\n        {\n          image: props.image.images,\n          isLoading: state.isLoading || hasImageLoaded(cacheKey),\n          isLoaded: state.isLoaded || hasImageLoaded(cacheKey),\n          toggleIsLoaded: () => {\n            props.onLoad?.()\n\n            this.setState({\n              isLoaded: true,\n            })\n          },\n          ref: this.ref,\n          ...props,\n        },\n        this.root,\n        this.hydrated,\n        this.forceRender\n      )\n    })\n  }\n\n  /**\n   * Choose if setupIntersectionObserver should use the image cache or not.\n   */\n  _setupIntersectionObserver(useCache = true): void {\n    import(`./intersection-observer`).then(({ createIntersectionObserver }) => {\n      const intersectionObserver = createIntersectionObserver(() => {\n        if (this.root.current) {\n          const cacheKey = JSON.stringify(this.props.image.images)\n          this.props.onStartLoad?.({\n            wasCached: useCache && hasImageLoaded(cacheKey),\n          })\n          this.setState({\n            isLoading: true,\n            isLoaded: useCache && hasImageLoaded(cacheKey),\n          })\n        }\n      })\n\n      if (this.root.current) {\n        this.unobserveRef = intersectionObserver(this.root)\n      }\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState): boolean {\n    let hasChanged = false\n    if (!this.state.isLoading && nextState.isLoading && !nextState.isLoaded) {\n      // Props have changed between SSR and hydration, so we need to force render instead of hydrate\n      this.forceRender.current = true\n    }\n    // this check mostly means people do not have the correct ref checks in place, we want to reset some state to suppport loading effects\n    if (this.props.image.images !== nextProps.image.images) {\n      // reset state, we'll rely on intersection observer to reload\n      if (this.unobserveRef) {\n        // unregister intersectionObserver\n        this.unobserveRef()\n\n        // // on unmount, make sure we cleanup\n        if (this.hydrated.current && this.lazyHydrator) {\n          render(null, this.root.current)\n        }\n      }\n\n      this.setState(\n        {\n          isLoading: false,\n          isLoaded: false,\n        },\n        () => {\n          this._setupIntersectionObserver(false)\n        }\n      )\n\n      hasChanged = true\n    }\n\n    if (this.root.current && !hasChanged) {\n      this._lazyHydrate(nextProps, nextState)\n    }\n\n    return false\n  }\n\n  componentDidMount(): void {\n    if (this.root.current) {\n      const ssrElement = this.root.current.querySelector(\n        `[data-gatsby-image-ssr]`\n      ) as HTMLImageElement\n      const cacheKey = JSON.stringify(this.props.image.images)\n\n      // when SSR and native lazyload is supported we'll do nothing ;)\n      if (\n        hasNativeLazyLoadSupport() &&\n        ssrElement &&\n        gatsbyImageIsInstalled()\n      ) {\n        this.props.onStartLoad?.({ wasCached: false })\n\n        // When the image is already loaded before we have hydrated, we trigger onLoad and cache the item\n        if (ssrElement.complete) {\n          this.props.onLoad?.()\n          storeImageloaded(cacheKey)\n        } else {\n          // We need the current class context (this) inside our named onLoad function\n          // The named function is necessary to easily remove the listener afterward.\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const _this = this\n          // add an onLoad to the image\n          ssrElement.addEventListener(`load`, function onLoad() {\n            ssrElement.removeEventListener(`load`, onLoad)\n\n            _this.props.onLoad?.()\n            storeImageloaded(cacheKey)\n          })\n        }\n\n        return\n      }\n\n      // Fallback to custom lazy loading (intersection observer)\n      this._setupIntersectionObserver(true)\n    }\n  }\n\n  componentWillUnmount(): void {\n    // Cleanup when onmount happens\n    if (this.unobserveRef) {\n      // unregister intersectionObserver\n      this.unobserveRef()\n\n      // on unmount, make sure we cleanup\n      if (this.hydrated.current && this.lazyHydrator) {\n        this.lazyHydrator()\n      }\n    }\n\n    return\n  }\n\n  render(): JSX.Element {\n    const Type = this.props.as || `div`\n    const { width, height, layout } = this.props.image\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    let className = this.props.className\n    // preact class\n    if (this.props.class) {\n      className = this.props.class\n    }\n\n    const sizer = getSizer(layout, width, height)\n\n    return (\n      <Type\n        {...wrapperProps}\n        style={{\n          ...wStyle,\n          ...this.props.style,\n          backgroundColor: this.props.backgroundColor,\n        }}\n        className={`${wClass}${className ? ` ${className}` : ``}`}\n        ref={this.root}\n        dangerouslySetInnerHTML={{\n          __html: sizer,\n        }}\n        suppressHydrationWarning\n      />\n    )\n  }\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n    const { className, class: classSafe, backgroundColor, image } = props\n    const { width, height, layout } = image\n    const propsKey = JSON.stringify([\n      width,\n      height,\n      layout,\n      className,\n      classSafe,\n      backgroundColor,\n    ])\n    return <GatsbyImageHydrator key={propsKey} {...props} />\n  }\n\nGatsbyImage.propTypes = propTypes\n\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;"],"sourceRoot":""}